/*****************************************************************************
 * Project: RooFit                                                           *
 *                                                                           *
 * This code was autogenerated by RooClassFactory                            *
 *****************************************************************************/

// Your description goes here...

#include "Riostream.h"

#include "dscb.h"
#include "RooAbsReal.h"
#include "RooAbsCategory.h"
#include <math.h>
#include "TF1.h"
#include "TMath.h"
#include "Math/Math.h"

ClassImp(dscb)

 dscb::dscb(const char *name, const char *title,
                        RooAbsReal& _x,
//                        RooAbsReal& _Norm,
                        RooAbsReal& _x0,
                        RooAbsReal& _sigma,
                        RooAbsReal& _ANeg,
                        RooAbsReal& _PNeg,
                        RooAbsReal& _APos,
                        RooAbsReal& _PPos) :
   RooAbsPdf(name,title),
//   Norm("Norm","Norm",this,_Norm),
   x("x","x",this,_x),
   x0("x0","x0",this,_x0),
   sigma("sigma","sigma",this,_sigma),
   ANeg("ANeg","ANeg",this,_ANeg),
   PNeg("PNeg","PNeg",this,_PNeg),
   APos("APos","APos",this,_APos),
   PPos("PPos","PPos",this,_PPos)
 {
 }


 dscb::dscb(const dscb& other, const char* name) :
   RooAbsPdf(other,name),
//   Norm("Norm",this,other.Norm),
   x("x",this,other.x),
   x0("x0",this,other.x0),
   sigma("sigma",this,other.sigma),
   ANeg("ANeg",this,other.ANeg),
   PNeg("PNeg",this,other.PNeg),
   APos("APos",this,other.APos),
   PPos("PPos",this,other.PPos)
 {
 }

 Double_t dscb::evaluate() const {
   double result;
   double u   = (x-x0)/sigma;
  //  double A1  = pow(PNeg/fabs(ANeg),PNeg)*exp(-ANeg*ANeg/2);
  //  double A2  = pow(PPos/fabs(APos),PPos)*exp(-APos*APos/2);
  //  double B1  = PNeg/fabs(ANeg) - fabs(ANeg);
  //  double B2  = PPos/fabs(APos) - fabs(APos);
   double A1  = TMath::Power(PNeg/TMath::Abs(ANeg),PNeg)*TMath::Exp(-ANeg*ANeg/2);
   double A2  = TMath::Power(PPos/TMath::Abs(APos),PPos)*TMath::Exp(-APos*APos/2);
   double B1  = PNeg/TMath::Abs(ANeg) - TMath::Abs(ANeg);
   double B2  = PPos/TMath::Abs(APos) - TMath::Abs(APos);
  //
  // // double result(Norm);
   if      (u<-ANeg) result = A1*TMath::Power(B1-u,-PNeg);
   else if (u<APos)  result = TMath::Exp(-u*u/2);
   else              result = A2*TMath::Power(B2+u,-PPos);
   return result;
 }
